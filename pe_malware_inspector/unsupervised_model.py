import pandas as pd
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA

class DimensionalityReduction:
    def __init__(self, n_components):
        self.n_components = n_components
        self.pca = PCA(n_components=n_components)
    
    def fit_transform(self, data):
        # Fit and transform the data using PCA
        reduced_data = self.pca.fit_transform(data)
        return reduced_data

    def explained_variance_ratio(self):
        # Return the explained variance ratio for each component
        return self.pca.explained_variance_ratio_



class UnsupervisedKMeans:
    def __init__(self, n_clusters):
        self.n_clusters = n_clusters
        self.kmeans = KMeans(n_clusters=n_clusters)
    
    def fit_predict(self, data):
        # Fit the K-Means model and predict cluster labels
        cluster_labels = self.kmeans.fit_predict(data)
        return cluster_labels
    
    def plot_clusters(self, data, cluster_labels):
        # Visualize the clusters
        plt.figure(figsize=(8, 6))
        sns.scatterplot(x=data[:, 0], y=data[:, 1], hue=cluster_labels, palette='viridis', legend='full')
        plt.title('K-Means Clustering')
        plt.xlabel('Principal Component 1')
        plt.ylabel('Principal Component 2')
        plt.show()





# Usage Example
# Load the dataset
dataframe = pd.read_csv("/home/rashmin/Desktop/pe_malware_inspector/data/features.csv", usecols=["label", "size_image", "size_code", "size_uninit", "pe_majorlink", "pe_minorlink", "pe_driver", "pe_exe", "pe_dll", "pe_char", "debug_size", "major_version", "minor_version", "iat_rva", "export_size", "check_sum", "generated_check_sum", "virtual_address", "virtual_size", "number_of_sections", "number_of_rva_and_sizes", "total_size_pe"])

features = dataframe.drop('label', axis=1)

# Create an instance of the DimensionalityReduction class
dr = DimensionalityReduction(n_components=2)

# Fit and transform the data using PCA
reduced_data = dr.fit_transform(features)

# Create an instance of the UnsupervisedKMeans class
uk = UnsupervisedKMeans(n_clusters=3)

# Fit K-Means and predict clusters on the reduced data
cluster_labels = uk.fit_predict(reduced_data)

# Visualize the clusters
uk.plot_clusters(reduced_data, cluster_labels)
